export declare type ItemValueWrapper<V> = {
    itemValue: V;
    expirationTimestampInMillisSinceEpoch: number | undefined;
};
export default class MemoryCache<K, V> {
    private readonly itemsExpirationCheckIntervalInSecs;
    private readonly maxItemCount;
    private static readonly EXPIRATION_PROCESSING_ITEM_BATCH_SIZE;
    private readonly itemKeyToItemValueWrapperMap;
    private timer;
    private itemCount;
    constructor(itemsExpirationCheckIntervalInSecs: number, maxItemCount: number);
    storePermanentItem(itemKey: K, itemValue: V): void;
    storeExpiringItem(itemKey: K, itemValue: V, timeToLiveInSecs: number): void;
    getItemCount(): number;
    hasItem(itemKey: K): boolean;
    retrieveItemValue(itemKey: K): V | undefined;
    getItemExpirationTimestampInMillisSinceEpoch(itemKey: K): number | undefined;
    removeItem(itemKey: K): void;
    clear(): void;
    destroy(): void;
    private readonly deleteExpiredItems;
    private deleteExpiredItemsFromBatch;
}
